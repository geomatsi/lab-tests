# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *

####### GLOBALS

#KERNEL_REPO  = 'git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git',
#KERNEL_REPO  = 'https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git',
KERNEL_REPO   = 'https://github.com/torvalds/linux.git'
OPENSBI_REPO  = 'https://github.com/riscv/opensbi.git'

ENABLE_HARDWARE_TESTS = False
ENABLE_QEMU_TESTS = True

####### BUILDMASTER

c = BuildmasterConfig = {}

# project identity
c['buildbotURL'] = "http://webb:8010/"
c['titleURL'] = "https://buildbot.github.io/hello-world/"
c['title'] = "Labgrid tests"

# database URL
c['db'] = {
    'db_url' : "sqlite:///state.sqlite",
}

# minimalistic config to activate new web UI
c['www'] = dict(port=8010, plugins=dict(waterfall_view={}, console_view={}, grid_view={}))
c['protocols'] = {'pb': {'port': 9989}}
c['services'] = []

# building blocks
c['change_source'] = []
c['schedulers'] = []
c['builders'] = []
c['projects'] = []
c['workers'] = []

# projects
c['projects'].append(util.Project(name="RISC-V", description="Automated tests of Linux kernel for RISC-V architecture"))
c['projects'].append(util.Project(name="SUNXI", description="Automated tests of Linux kernel for sunxi platforms"))

# workers
c['workers'].append(worker.Worker("builder1", "topsecret"))
c['workers'].append(worker.Worker("tester1", "topsecret"))

####### TESTLAB

# TODO: not used at the moment
lab = {
    "slot1": {
        "enabled" : False,
    },
    "slot2": {
        "enabled" : True,
        "board"   : "OrangePi PC Plus",
        "ipaddr"  : "192.168.1.10",
        "default" : "artifacts/images/default/slot2",
        "kernel"  : "zImage",
        "dtb"     : "sun8i-h3-orangepi-pc-plus.dtb",
    },
    "slot3": {
        "enabled" : True,
        "board"   : "MangoPi MQ Pro",
        "ipaddr"  : "192.168.1.20",
        "default" : "artifacts/images/default/slot3",
        "fsbl"    : "jump.bin",
        "opensbi" : "fw_jump.bin",
        "kernel"  : "Image",
        "dtb"     : "sun20i-d1-mangopi-mq-pro.dtb",
    },
    "slot4": {
        "enabled" : False,
    },
    "slot5": {
        "enabled" : False,
    },
    "slot6": {
        "enabled" : False,
    },
    "slot7": {
        "enabled" : False,
    },
    "slot8": {
        "enabled" : True,
        "board"   : "Sipeed LicheePi 4A",
        "ipaddr"  : "192.168.1.80",
        "default" : "artifacts/images/default/slot8",
        "kernel"  : "Image",
        "dtb"     : "th1520-lichee-pi-4a.dtb",
    },
}

##############################################################
#################### COMMON BITS
##############################################################

####### CHANGESOURCES

c['change_source'].append(changes.GitPoller(
        KERNEL_REPO,
        workdir='gitpoller-workdir', branch='master',
        pollAtLaunch=True, pollInterval=3600,
        category='kernel'))

c['change_source'].append(changes.GitPoller(
        OPENSBI_REPO,
        workdir='gitpoller-workdir', branch='master',
        pollAtLaunch=True, pollInterval=3600,
        category='opensbi'))

##############################################################
#################### PROJECT: RISC-V
##############################################################

####### SCHEDULERS

# schedule builds based on source changes

@util.renderer
def select_riscv_kernel_builders(props):
    props.setProperty('HARDWARE_TESTS', ENABLE_HARDWARE_TESTS, 'select_riscv_kernel_builders')
    props.setProperty('QEMU_TESTS', ENABLE_QEMU_TESTS, 'select_riscv_kernel_builders')
    builders = set()

    print("----------------  Changed files")

    for fn in props.files:
        print(f"  {fn}")
        #if fn.startswith("arch/riscv/"):
        #    builders.add('riscv-kernel-build')

    # for now kick riscv64 kernel builds for any kernel changes
    builders.add('riscv-kernel-build')
    builders.add('kernel-poll')

    print(f"expected builders: {list(builders)}")
    return list(builders)

c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="riscv-kernel-master-scheduler",
                            change_filter=util.ChangeFilter(branch='master', category='kernel'),
                            builderNames=select_riscv_kernel_builders))

@util.renderer
def select_opensbi_builders(props):
    props.setProperty('HARDWARE_TESTS', ENABLE_HARDWARE_TESTS, 'select_opensbi_builders')
    props.setProperty('QEMU_TESTS', ENABLE_QEMU_TESTS, 'select_opensbi_builders')
    builders = set()

    builders.add('opensbi-build')
    builders.add('opensbi-poll')

    print(f"expected builders: {list(builders)}")
    return list(builders)

c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="opensbi-master-scheduler",
                            change_filter=util.ChangeFilter(branch='master', category='opensbi'),
                            builderNames=select_opensbi_builders))

# schedule builds and tests on demands

c['schedulers'].append(schedulers.ForceScheduler(
                            name="force-riscv-kernel-build",
                            properties=[
                                util.BooleanParameter(name="HARDWARE_TESTS", label="Run hardware tests", default=False),
                                util.BooleanParameter(name="QEMU_TESTS", label="Run QEMU tests", default=False),
                            ],
                            builderNames=["riscv-kernel-build", "kernel-poll"]))

c['schedulers'].append(schedulers.ForceScheduler(
                            name="force-opensbi-build",
                            properties=[
                                util.BooleanParameter(name="HARDWARE_TESTS", label="Run hardware tests", default=False),
                                util.BooleanParameter(name="QEMU_TESTS", label="Run QEMU tests", default=False),
                            ],
                            builderNames=["opensbi-build", "opensbi-poll"]))

c['schedulers'].append(schedulers.ForceScheduler(
                            name="force-riscv-qemu-test",
                            properties=[
                                util.BooleanParameter(name="DEFAULT_IMAGES", label="Use default images", default=False),
                            ],
                            builderNames=["test-qemu1-riscv64", "test-qemu2-riscv64", "kernel-poll"]))

c['schedulers'].append(schedulers.ForceScheduler(
                            name="force-riscv-lab-tests",
                            properties=[
                                util.BooleanParameter(name="DEFAULT_IMAGES", label="Use default images", default=False),
                            ],
                            builderNames=['test-mangopi-mqpro', 'test-sipeed-lpi4a']))

# trigger builds and tests from other builders

c['schedulers'].append(schedulers.Triggerable(
    name='riscv-lab-test-scheduler',
    builderNames=['test-mangopi-mqpro', 'test-sipeed-lpi4a']))

c['schedulers'].append(schedulers.Triggerable(
    name='riscv-qemu-test-scheduler',
    builderNames=['test-qemu1-riscv64', 'test-qemu2-riscv64']))

c['schedulers'].append(schedulers.Triggerable(
    name='opensbi-lab-test-scheduler',
    builderNames=['test-mangopi-mqpro']))

c['schedulers'].append(schedulers.Triggerable(
    name='opensbi-qemu-test-scheduler',
    # test both new OpenSBI and QEMU default OpenSBI to allow comparison in the case of failures
    builderNames=['test-qemu1-riscv64', 'test-qemu2-riscv64']))

####### BUILDERS

#### 'DEBUG' builders

## track kernel changes

factory00_0 = util.BuildFactory()

factory00_0.addStep(steps.ShellSequence(
    haltOnFailure=True,
    commands=[
        util.ShellArg(command=["echo", "DEFAULT_IMAGES=", util.Interpolate("%(prop:DEFAULT_IMAGES)s", default='False')], logname="test1"),
        util.ShellArg(command=["echo", "HARDWARE_TESTS=", util.Interpolate('%(prop:HARDWARE_TESTS)s', default='None')], logname="test2"),
        util.ShellArg(command=["echo", "QEMU_TESTS=", util.Interpolate('%(prop:QEMU_TESTS)s', default='None')], logname="test3"),
    ]
))

factory00_0.addStep(steps.ShellCommand(
    command=["echo", "HARDWARE_TESTS=", util.Interpolate('%(prop:HARDWARE_TESTS)s')],
    doStepIf=lambda step: step.build.getProperty('HARDWARE_TESTS', default=False),
))

factory00_0.addStep(steps.ShellCommand(
    command=["echo", "QEMU_TESTS=", util.Interpolate('%(prop:QEMU_TESTS)s')],
    doStepIf=lambda step: step.build.getProperty('QEMU_TESTS', default=False),
))

factory00_0.addStep(steps.ShellCommand(
    command=['date']
))

c['builders'].append(
    util.BuilderConfig(
        name="kernel-poll",
        workernames=["builder1"],
        factory=factory00_0))

## track opensbi changes

factory00_1 = util.BuildFactory()

factory00_1.addStep(steps.ShellCommand(
    command=['date']
))

c['builders'].append(
    util.BuilderConfig(
        name="opensbi-poll",
        workernames=["builder1"],
        factory=factory00_1))

#### 'BUILD' builders

#
# builder: build riscv kernel images
#

riscv_factory01 = util.BuildFactory()

riscv_factory01.addStep(steps.Git(repourl=KERNEL_REPO,
                           alwaysUseLatest=True,
                           mode='full',
                           method='fresh'))

riscv_factory01.addStep(steps.FileDownload(
    haltOnFailure=True,
    mastersrc="artifacts/images/rootfs/rootfs.cpio.rv64.generic",
    workerdest="rootfs.cpio"))

riscv_factory01.addStep(steps.ShellSequence(
    haltOnFailure=True,
    commands=[
        util.ShellArg(command=['make', 'defconfig'], logname='configure'),
        util.ShellArg(command=['make', 'CONFIG_INITRAMFS_SOURCE=rootfs.cpio', '-j5'], logname='build kernel'),
        util.ShellArg(command=['make', 'allwinner/sun20i-d1-mangopi-mq-pro.dtb'], logname='build mangopi mq pro dtb'),
        util.ShellArg(command=['make', 'thead/th1520-lichee-pi-4a.dtb'], logname='build lpi4a dtb'),
    ],
    env={
        "ARCH": "riscv",
        "CROSS_COMPILE": "/home/matsi/devel2/tools/bootlin/riscv64-lp64d--glibc--bleeding-edge-2025.08-1/bin/riscv64-linux-"
    }))

# copy to the build artifacts

riscv_factory01.addStep(steps.FileUpload(
    haltOnFailure=True,
    workersrc="arch/riscv/boot/Image",
    masterdest=util.Interpolate('artifacts/%(prop:buildername)s-%(prop:buildnumber)s/Image'),
    url=util.Interpolate('artifacts/%(prop:buildername)s-%(prop:buildnumber)s/Image'),
    mode=0o755))

riscv_factory01.addStep(steps.FileUpload(
    haltOnFailure=True,
    workersrc="arch/riscv/boot/dts/allwinner/sun20i-d1-mangopi-mq-pro.dtb",
    masterdest=util.Interpolate('artifacts/%(prop:buildername)s-%(prop:buildnumber)s/sun20i-d1-mangopi-mq-pro.dtb'),
    url=util.Interpolate('artifacts/%(prop:buildername)s-%(prop:buildnumber)s/sun20i-d1-mangopi-mq-pro.dtb'),
    mode=0o755))

riscv_factory01.addStep(steps.FileUpload(
    haltOnFailure=True,
    workersrc="arch/riscv/boot/dts/thead/th1520-lichee-pi-4a.dtb",
    masterdest=util.Interpolate('artifacts/%(prop:buildername)s-%(prop:buildnumber)s/th1520-lichee-pi-4a.dtb'),
    url=util.Interpolate('artifacts/%(prop:buildername)s-%(prop:buildnumber)s/th1520-lichee-pi-4a.dtb'),
    mode=0o755))

# copy to the latest artifacts

# - FIXME: lock needed for the 'latest' directory
riscv_factory01.addStep(steps.FileUpload(
    haltOnFailure=True,
    workersrc="arch/riscv/boot/Image",
    masterdest=util.Interpolate('artifacts/latest/riscv64/Image'),
    url=util.Interpolate('artifacts/latest/riscv64/Image'),
    mode=0o755))

riscv_factory01.addStep(steps.FileUpload(
    haltOnFailure=True,
    workersrc="arch/riscv/boot/dts/allwinner/sun20i-d1-mangopi-mq-pro.dtb",
    masterdest=util.Interpolate('artifacts/latest/riscv64/sun20i-d1-mangopi-mq-pro.dtb'),
    url=util.Interpolate('artifacts/latest/riscv64/sun20i-d1-mangopi-mq-pro.dtb'),
    mode=0o755))

riscv_factory01.addStep(steps.FileUpload(
    haltOnFailure=True,
    workersrc="arch/riscv/boot/dts/thead/th1520-lichee-pi-4a.dtb",
    masterdest=util.Interpolate('artifacts/latest/riscv64/th1520-lichee-pi-4a.dtb'),
    url=util.Interpolate('artifacts/latest/riscv64/th1520-lichee-pi-4a.dtb'),
    mode=0o755))

# trigger tests

riscv_factory01.addStep(steps.Trigger(
    schedulerNames=['riscv-lab-test-scheduler'],
    set_properties={
        'sun20i-d1-mangopi-mq-pro.dtb': util.Interpolate('artifacts/%(prop:buildername)s-%(prop:buildnumber)s/sun20i-d1-mangopi-mq-pro.dtb'),
        'th1520-lichee-pi-4a.dtb': util.Interpolate('artifacts/%(prop:buildername)s-%(prop:buildnumber)s/th1520-lichee-pi-4a.dtb'),
        'Image': util.Interpolate('artifacts/%(prop:buildername)s-%(prop:buildnumber)s/Image'),
    },
    doStepIf=lambda step: step.build.getProperty('HARDWARE_TESTS', default=False),
    waitForFinish=False))

riscv_factory01.addStep(steps.Trigger(
    schedulerNames=['riscv-qemu-test-scheduler'],
    set_properties={
        'Image': util.Interpolate('artifacts/%(prop:buildername)s-%(prop:buildnumber)s/Image'),
    },
    doStepIf=lambda step: step.build.getProperty('QEMU_TESTS', default=False),
    waitForFinish=False))

c['builders'].append(
    util.BuilderConfig(
        name="riscv-kernel-build",
        project="RISC-V",
        workernames=["builder1"],
        factory=riscv_factory01))

#
# builder: build opensbi images
#

riscv_factory02 = util.BuildFactory()

riscv_factory02.addStep(steps.Git(repourl=OPENSBI_REPO,
                           alwaysUseLatest=True,
                           mode='full',
                           method='fresh'))

riscv_factory02.addStep(steps.ShellSequence(
    haltOnFailure=True,
    commands=[
        util.ShellArg(command=['git', 'clean', '-fdxx'], logname='clean'),
        util.ShellArg(command=['make'], logname='opensbi'),
    ],
    env={
        "ARCH": "riscv",
        "PLATFORM": "generic",
        "CROSS_COMPILE": "/home/matsi/devel2/tools/bootlin/riscv64-lp64d--glibc--bleeding-edge-2025.08-1/bin/riscv64-linux-"
    }))

# copy to the build artifacts

riscv_factory02.addStep(steps.FileUpload(
    haltOnFailure=True,
    workersrc="build/platform/generic/firmware/fw_jump.bin",
    masterdest=util.Interpolate('artifacts/%(prop:buildername)s-%(prop:buildnumber)s/fw_jump.bin'),
    url=util.Interpolate('artifacts/%(prop:buildername)s-%(prop:buildnumber)s/fw_jump.bin'),
    mode=0o755))

riscv_factory02.addStep(steps.FileUpload(
    haltOnFailure=True,
    workersrc="build/platform/generic/firmware/fw_dynamic.bin",
    masterdest=util.Interpolate('artifacts/%(prop:buildername)s-%(prop:buildnumber)s/fw_dynamic.bin'),
    url=util.Interpolate('artifacts/%(prop:buildername)s-%(prop:buildnumber)s/fw_dynamic.bin'),
    mode=0o755))

# copy to the latest artifacts
# - TODO: need lock for the 'latest' directory

riscv_factory02.addStep(steps.FileUpload(
    haltOnFailure=True,
    workersrc="build/platform/generic/firmware/fw_jump.bin",
    masterdest=util.Interpolate('artifacts/latest/riscv64/fw_jump.bin'),
    url=util.Interpolate('artifacts/latest/riscv64/fw_jump.bin'),
    mode=0o755))

riscv_factory02.addStep(steps.FileUpload(
    haltOnFailure=True,
    workersrc="build/platform/generic/firmware/fw_dynamic.bin",
    masterdest=util.Interpolate('artifacts/latest/riscv64/fw_dynamic.bin'),
    url=util.Interpolate('artifacts/latest/riscv64/fw_dynamic.bin'),
    mode=0o755))

riscv_factory02.addStep(steps.ShellSequence(
    haltOnFailure=True,
    commands=[
        util.ShellArg(command=['git', 'clean', '-fdxx'], logname='clean'),
        util.ShellArg(command=['make'], logname='opensbi'),
    ],
    env={
        "ARCH": "riscv",
        "PLATFORM": "generic",
        # custom fw_jump.bin for MangoPi MQPro FEL boot
        "FW_JUMP_FDT_OFFSET": "0x8200000",
        "CROSS_COMPILE": "/home/matsi/devel2/tools/bootlin/riscv64-lp64d--glibc--bleeding-edge-2025.08-1/bin/riscv64-linux-"
    }))

# copy to the build artifacts

riscv_factory02.addStep(steps.FileUpload(
    haltOnFailure=True,
    workersrc="build/platform/generic/firmware/fw_jump.bin",
    masterdest=util.Interpolate('artifacts/%(prop:buildername)s-%(prop:buildnumber)s/fw_jump.bin.mango'),
    url=util.Interpolate('artifacts/%(prop:buildername)s-%(prop:buildnumber)s/fw_jump.bin.mango'),
    mode=0o755))

# copy to the latest artifacts

# FIXME: lock needed for the shared 'latest' directory
riscv_factory02.addStep(steps.FileUpload(
    haltOnFailure=True,
    workersrc="build/platform/generic/firmware/fw_jump.bin",
    masterdest=util.Interpolate('artifacts/latest/riscv64/fw_jump.bin.mango'),
    url=util.Interpolate('artifacts/latest/riscv64/fw_jump.bin.mango'),
    mode=0o755))

# trigger tests

riscv_factory02.addStep(steps.Trigger(
    schedulerNames=['opensbi-qemu-test-scheduler'],
    set_properties={
        'fw_jump.bin': util.Interpolate('artifacts/%(prop:buildername)s-%(prop:buildnumber)s/fw_jump.bin'),
        'fw_dynamic.bin': util.Interpolate('artifacts/%(prop:buildername)s-%(prop:buildnumber)s/fw_dynamic.bin'),
        'fw_jump.bin.mango': util.Interpolate('artifacts/%(prop:buildername)s-%(prop:buildnumber)s/fw_jump.bin.mango'),
    },
    doStepIf=lambda step: step.build.getProperty('QEMU_TESTS', default=False),
    waitForFinish=False))

riscv_factory02.addStep(steps.Trigger(
    schedulerNames=['opensbi-lab-test-scheduler'],
    set_properties={
        'fw_jump.bin': util.Interpolate('artifacts/%(prop:buildername)s-%(prop:buildnumber)s/fw_jump.bin'),
        'fw_dynamic.bin': util.Interpolate('artifacts/%(prop:buildername)s-%(prop:buildnumber)s/fw_dynamic.bin'),
        'fw_jump.bin.mango': util.Interpolate('artifacts/%(prop:buildername)s-%(prop:buildnumber)s/fw_jump.bin.mango'),
    },
    doStepIf=lambda step: step.build.getProperty('HARDWARE_TESTS', default=False),
    waitForFinish=False))

c['builders'].append(
    util.BuilderConfig(
        name="opensbi-build",
        project="RISC-V",
        workernames=["builder1"],
        factory=riscv_factory02))

#### 'QEMU TEST' builders

#
# qemu1: test riscv64 Linux kernel in QEMU
#   - QEMU provides default OpenSBI and DTB
#

qemu1 = util.BuildFactory()

qemu1.addStep(steps.Git(repourl='https://github.com/geomatsi/lab-tests.git',
                           alwaysUseLatest=True,
                           mode='incremental'))

qemu1.addStep(steps.FileDownload(
    doStepIf=lambda step: step.build.getProperty('DEFAULT_IMAGES', default=False),
    haltOnFailure=True,
    mastersrc='artifacts/images/default/qemu1/Image',
    workerdest='lab/workspace/Image',
    name='download default kernel',
    mode=0o755))

# FIXME: lock needed for shared 'latest' directory
qemu1.addStep(steps.FileDownload(
    doStepIf=lambda step: not step.build.getProperty('DEFAULT_IMAGES', default=False),
    haltOnFailure=True,
    mastersrc=util.Property('Image', default='artifacts/latest/riscv64/Image'),
    workerdest='lab/workspace/Image',
    name='download latest kernel',
    mode=0o755))

qemu1.addStep(steps.ShellSequence(
    haltOnFailure=True,
    commands=[
        util.ShellArg(command=['md5sum', 'workspace/Image'], logname='check kernel'),
    ],
    workdir="build/lab"))

qemu1.addStep(steps.ShellCommand(
    haltOnFailure=True,
    command=['pytest', '--lg-log', '--lg-env', 'configs/targets/local/qemu-riscv64-kernel.yaml', 'tests/test_shell.py::test_boot'],
    workdir="build/lab",
    logfiles={"console": { "filename": "console_main", "follow": True}},
    env={
        "LG_QEMU_RISCV64": "/usr/bin/qemu-system-riscv64",
        "LG_IMAGES"      : "$PWD/workspace",
        "LG_LINUX"       : "Image",
    }))

c['builders'].append(
    util.BuilderConfig(
        name="test-qemu1-riscv64",
        project="RISC-V",
        workernames=["tester1"],
        factory=qemu1))

#
# qemu2: test riscv64 OpenSBI and Linux kernel in QEMU
#   - QEMU provides default DTB
#

qemu2 = util.BuildFactory()

qemu2.addStep(steps.Git(repourl='https://github.com/geomatsi/lab-tests.git',
                           alwaysUseLatest=True,
                           mode='incremental'))

qemu2.addStep(steps.FileDownload(
    doStepIf=lambda step: step.build.getProperty('DEFAULT_IMAGES', default=False),
    haltOnFailure=True,
    mastersrc='artifacts/images/default/qemu2/Image',
    workerdest='lab/workspace/Image',
    name='download default kernel',
    mode=0o755))

# FIXME: lock needed for the shared 'latest' directory
qemu2.addStep(steps.FileDownload(
    doStepIf=lambda step: not step.build.getProperty('DEFAULT_IMAGES', default=False),
    haltOnFailure=True,
    mastersrc=util.Property('Image', default='artifacts/latest/riscv64/Image'),
    workerdest='lab/workspace/Image',
    name='download latest kernel',
    mode=0o755))

qemu2.addStep(steps.FileDownload(
    doStepIf=lambda step: step.build.getProperty('DEFAULT_IMAGES', default=False),
    haltOnFailure=True,
    mastersrc='artifacts/images/default/qemu2/fw_dynamic.bin',
    workerdest='lab/workspace/fw_dynamic.bin',
    name='download default opensbi',
    mode=0o755))

# FIXME: lock needed for the shared 'latest' directory
qemu2.addStep(steps.FileDownload(
    doStepIf=lambda step: not step.build.getProperty('DEFAULT_IMAGES', default=False),
    haltOnFailure=True,
    mastersrc=util.Property('fw_dynamic.bin', default='artifacts/latest/riscv64/fw_dynamic.bin'),
    workerdest='lab/workspace/fw_dynamic.bin',
    name='download latest opensbi',
    mode=0o755))

qemu2.addStep(steps.ShellSequence(
    haltOnFailure=True,
    commands=[
        util.ShellArg(command=['md5sum', 'workspace/Image'], logname='check Linux kernel'),
        util.ShellArg(command=['md5sum', 'workspace/fw_dynamic.bin'], logname='check OpenSBI'),
    ],
    workdir="build/lab"))

qemu2.addStep(steps.ShellCommand(
    haltOnFailure=True,
    command=['pytest', '--lg-log', '--lg-env', 'configs/targets/local/qemu-riscv64-full.yaml', 'tests/test_shell.py::test_boot'],
    workdir="build/lab",
    logfiles={"console": { "filename": "console_main", "follow": True}},
    env={
        "LG_QEMU_RISCV64": "/usr/bin/qemu-system-riscv64",
        "LG_IMAGES"      : "$PWD/workspace",
        "LG_OPENSBI"     : "fw_dynamic.bin",
        "LG_LINUX"       : "Image",
    }))

c['builders'].append(
    util.BuilderConfig(
        name="test-qemu2-riscv64",
        project="RISC-V",
        workernames=["tester1"],
        factory=qemu2))

#### 'LAB TEST' builders for RISC-V projects
#
# - slot3: MangoPi MQ Pro
# - slot8: Sipeed LicheePi 4A
#

# slot3: test riscv64 generic kernel on MangoPi MQ Pro

slot3 = util.BuildFactory()

slot3.addStep(steps.Git(repourl='https://github.com/geomatsi/lab-tests.git',
                        alwaysUseLatest=True,
                        mode='incremental'))

# For now always use default jump.bin image
slot3.addStep(steps.FileDownload(
    haltOnFailure=True,
    mastersrc='artifacts/images/default/slot3/jump.bin',
    workerdest='lab/workspace/jump.bin',
    name='download default jump.bin',
    mode=0o755))

# For now always use default sun20i-d1-mangopi-mq-pro.dtb image
# FIXME: For FEL boot we need to patch upstream mangopi-mq-pro dtb and add explicit valid memory node
# FIXME: patch upstream kernel ?
slot3.addStep(steps.FileDownload(
    haltOnFailure=True,
    mastersrc='artifacts/images/default/slot3/sun20i-d1-mangopi-mq-pro.dtb',
    workerdest='lab/workspace/sun20i-d1-mangopi-mq-pro.dtb',
    name='download default dtb',
    mode=0o755))

slot3.addStep(steps.FileDownload(
    doStepIf=lambda step: step.build.getProperty('DEFAULT_IMAGES', default=False),
    haltOnFailure=True,
    mastersrc='artifacts/images/default/slot3/fw_jump.bin',
    workerdest='lab/workspace/fw_jump.bin',
    name='download default opensbi',
    mode=0o755))

# FIXME: lock needed for the shared 'latest' directory
slot3.addStep(steps.FileDownload(
    doStepIf=lambda step: not step.build.getProperty('DEFAULT_IMAGES', default=False),
    haltOnFailure=True,
    mastersrc=util.Property('fw_jump.bin.mango', default='artifacts/latest/riscv64/fw_jump.bin.mango'),
    workerdest='lab/workspace/fw_jump.bin',
    name='download latest opensbi',
    mode=0o755))

slot3.addStep(steps.FileDownload(
    doStepIf=lambda step: step.build.getProperty('DEFAULT_IMAGES', default=False),
    haltOnFailure=True,
    mastersrc='artifacts/images/default/slot3/Image',
    workerdest='lab/workspace/Image',
    name='download default kernel',
    mode=0o755))

# FIXME: lock needed for the shared 'latest' directory
slot3.addStep(steps.FileDownload(
    doStepIf=lambda step: not step.build.getProperty('DEFAULT_IMAGES', default=False),
    haltOnFailure=True,
    mastersrc=util.Property('Image', default='artifacts/latest/riscv64/Image'),
    workerdest='lab/workspace/Image',
    name='download latest kernel',
    mode=0o755))

slot3.addStep(steps.ShellSequence(
    haltOnFailure=True,
    commands=[
        util.ShellArg(command=['md5sum', 'workspace/jump.bin'], logname='check fsbl'),
        util.ShellArg(command=['md5sum', 'workspace/fw_jump.bin'], logname='check OpenSBI'),
        util.ShellArg(command=['md5sum', 'workspace/sun20i-d1-mangopi-mq-pro.dtb'], logname='check dtb'),
        util.ShellArg(command=['md5sum', 'workspace/Image'], logname='check kernel'),
        util.ShellArg(command=['labgrid-client', 'places'], logname='check labgrid'),
        util.ShellArg(command=['labgrid-client', '-p', 'slot3', 'release', '--kick'], logname='force release slot'),
        util.ShellArg(command=['labgrid-client', '-p', 'slot3', 'acquire'], logname='acquire slot'),
    ],
    workdir="build/lab",
    env={
        "LG_COORDINATOR": "192.168.88.25",
    }))

slot3.addStep(steps.ShellCommand(
    haltOnFailure=True,
    command=['pytest', '--lg-log', '--lg-env', 'configs/targets/remote/test-mqpro-felboot.yaml', 'tests/test_shell.py::test_boot'],
    workdir="build/lab",
    logfiles={"console": { "filename": "console_main", "follow": True}},
    env={
        "LG_COORDINATOR" : "192.168.88.25",
        "LG_IMAGES"      : "$PWD/workspace",
        "LG_JUMPER"      : "jump.bin",
        "LG_OPENSBI"     : "fw_jump.bin",
        "LG_DTB"         : "sun20i-d1-mangopi-mq-pro.dtb",
        "LG_LINUX"       : "Image",
        "LG_PLACE"       : "slot3",
    }))

c['builders'].append(
    util.BuilderConfig(
        name="test-mangopi-mqpro",
        project="RISC-V",
        workernames=["tester1"],
        factory=slot3))

# slot8: test riscv64 generic kernel on Sipeed LicheePi 4A

slot8 = util.BuildFactory()

slot8.addStep(steps.Git(repourl='https://github.com/geomatsi/lab-tests.git',
                        alwaysUseLatest=True,
                        mode='incremental'))

slot8.addStep(steps.FileDownload(
    doStepIf=lambda step: step.build.getProperty('DEFAULT_IMAGES', default=False),
    haltOnFailure=True,
    mastersrc='artifacts/images/default/slot8/Image',
    workerdest='lab/workspace/Image',
    name='download default kernel',
    mode=0o755))

# FIXME: lock needed for the shared 'latest' directory
slot8.addStep(steps.FileDownload(
    doStepIf=lambda step: not step.build.getProperty('DEFAULT_IMAGES', default=False),
    haltOnFailure=True,
    mastersrc=util.Property('Image', default='artifacts/latest/riscv64/Image'),
    workerdest='lab/workspace/Image',
    name='download latest kernel',
    mode=0o755))

slot8.addStep(steps.FileDownload(
    doStepIf=lambda step: step.build.getProperty('DEFAULT_IMAGES', default=False),
    haltOnFailure=True,
    mastersrc='artifacts/images/default/slot8/th1520-lichee-pi-4a.dtb',
    workerdest='lab/workspace/th1520-lichee-pi-4a.dtb',
    name='download default dtb',
    mode=0o755))

# FIXME: lock needed for the shared 'latest' directory
slot8.addStep(steps.FileDownload(
    doStepIf=lambda step: not step.build.getProperty('DEFAULT_IMAGES', default=False),
    haltOnFailure=True,
    mastersrc=util.Property('th1520-lichee-pi-4a.dtb', default='artifacts/latest/riscv64/th1520-lichee-pi-4a.dtb'),
    workerdest='lab/workspace/th1520-lichee-pi-4a.dtb',
    name='download latest dtb',
    mode=0o755))

slot8.addStep(steps.ShellSequence(
    haltOnFailure=True,
    commands=[
        util.ShellArg(command=['md5sum', 'workspace/th1520-lichee-pi-4a.dtb'], logname='check dtb'),
        util.ShellArg(command=['md5sum', 'workspace/Image'], logname='check kernel'),
        util.ShellArg(command=['labgrid-client', 'places'], logname='check labgrid'),
        util.ShellArg(command=['labgrid-client', '-p', 'slot8', 'release', '--kick'], logname='force release slot'),
        util.ShellArg(command=['labgrid-client', '-p', 'slot8', 'acquire'], logname='acquire slot'),
    ],
    workdir="build/lab",
    env={
        "LG_COORDINATOR": "192.168.88.25",
    }))

slot8.addStep(steps.ShellCommand(
    haltOnFailure=True,
    command=['pytest', '--lg-log', '--lg-env', 'configs/targets/remote/test-lpi4a-netboot.yaml', 'tests/test_shell.py::test_version'],
    workdir="build/lab",
    logfiles={"console": { "filename": "console_main", "follow": True}},
    env={
        "LG_COORDINATOR": "192.168.88.25",
        "LG_IMAGES"     : "$PWD/workspace",
        "LG_LINUX"      : "Image",
        "LG_DTB"        : "th1520-lichee-pi-4a.dtb",
        "LG_PLACE"      : "slot8",
    }))

c['builders'].append(
    util.BuilderConfig(
        name="test-sipeed-lpi4a",
        project="RISC-V",
        workernames=["tester1"],
        factory=slot8))

##############################################################
#################### PROJECT: SUNXI
##############################################################

####### SCHEDULERS

# schedule builds based on source changes

@util.renderer
def select_sunxi_kernel_builders(props):
    props.setProperty('HARDWARE_TESTS', ENABLE_HARDWARE_TESTS, 'select_sunxi_kernel_builders')
    props.setProperty('QEMU_TESTS', ENABLE_QEMU_TESTS, 'select_sunxi_kernel_builders')
    builders = set()

    print("----------------  Changed files")

    for fn in props.files:
        print(f"  {fn}")
        if fn.startswith("arch/arm/"):
            builders.add('sunxi-arm-kernel-build')

    print(f"expected builders: {list(builders)}")
    return list(builders)

c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="sunxi-kernel-master-scheduler",
                            change_filter=util.ChangeFilter(branch='master', category='kernel'),
                            builderNames=select_sunxi_kernel_builders))

# schedule builds on demands

c['schedulers'].append(schedulers.ForceScheduler(
                            name="force-sunxi-arm-kernel-build",
                            properties=[
                                util.BooleanParameter(name="HARDWARE_TESTS", label="Run hardware tests", default=False),
                                util.BooleanParameter(name="QEMU_TESTS", label="Run QEMU tests", default=False),
                            ],
                            builderNames=["sunxi-arm-kernel-build"]))

c['schedulers'].append(schedulers.ForceScheduler(
                            name="force-sunxi-arm-lab-tests",
                            properties=[
                                util.BooleanParameter(name="DEFAULT_IMAGES", label="Use default images", default=False),
                            ],
                            builderNames=['test-orangepi-pc-plus']))

# trigger builds and tests from other builders

c['schedulers'].append(schedulers.Triggerable(
    name='sunxi-arm-lab-test-scheduler',
    builderNames=['test-orangepi-pc-plus']))

####### BUILDERS

#### 'BUILD' builders

#
# builder: build default sunxi arm kernel
#

sunxi_factory01 = util.BuildFactory()

sunxi_factory01.addStep(steps.Git(repourl=KERNEL_REPO,
                           alwaysUseLatest=True,
                           mode='full',
                           method='fresh'))

sunxi_factory01.addStep(steps.FileDownload(
    haltOnFailure=True,
    mastersrc="artifacts/images/rootfs/rootfs.cpio.arm.sunxi",
    workerdest="rootfs.cpio"))

sunxi_factory01.addStep(steps.ShellSequence(
    haltOnFailure=True,
    commands=[
        util.ShellArg(command=['make', 'sunxi_defconfig'], logname='configure'),
        util.ShellArg(command=['make', 'CONFIG_INITRAMFS_SOURCE=rootfs.cpio', '-j5'], logname='build kernel'),
        util.ShellArg(command=['make', 'allwinner/sun8i-h3-orangepi-pc-plus.dtb'], logname='build orangepi-pc-plus dtb'),
    ],
    env={
        "ARCH": "arm",
        "CROSS_COMPILE": "/home/matsi/devel2/tools/bootlin/armv7-eabihf--glibc--bleeding-edge-2025.08-1/bin/arm-linux-",
    }))

# copy to the build artifacts

sunxi_factory01.addStep(steps.FileUpload(
    haltOnFailure=True,
    workersrc="arch/arm/boot/zImage",
    masterdest=util.Interpolate('artifacts/%(prop:buildername)s-%(prop:buildnumber)s/zImage'),
    url=util.Interpolate('artifacts/%(prop:buildername)s-%(prop:buildnumber)s/zImage'),
    mode=0o755))

sunxi_factory01.addStep(steps.FileUpload(
    haltOnFailure=True,
    workersrc="arch/arm/boot/dts/allwinner/sun8i-h3-orangepi-pc-plus.dtb",
    masterdest=util.Interpolate('artifacts/%(prop:buildername)s-%(prop:buildnumber)s/sun8i-h3-orangepi-pc-plus.dtb'),
    url=util.Interpolate('artifacts/%(prop:buildername)s-%(prop:buildnumber)s/sun8i-h3-orangepi-pc-plus.dtb'),
    mode=0o755))

# copy to the latest artifacts

# - FIXME: lock needed for the 'latest' directory
sunxi_factory01.addStep(steps.FileUpload(
    haltOnFailure=True,
    workersrc="arch/arm/boot/zImage",
    masterdest=util.Interpolate('artifacts/latest/sunxi/zImage'),
    url=util.Interpolate('artifacts/latest/sunxi/zImage'),
    mode=0o755))

sunxi_factory01.addStep(steps.FileUpload(
    haltOnFailure=True,
    workersrc="arch/arm/boot/dts/allwinner/sun8i-h3-orangepi-pc-plus.dtb",
    masterdest=util.Interpolate('artifacts/latest/sunxi/sun8i-h3-orangepi-pc-plus.dtb'),
    url=util.Interpolate('artifacts/latest/sunxi/sun8i-h3-orangepi-pc-plus.dtb'),
    mode=0o755))

# trigger tests

sunxi_factory01.addStep(steps.Trigger(
    schedulerNames=['sunxi-arm-lab-test-scheduler'],
    set_properties={
        'sun8i-h3-orangepi-pc-plus.dtb': util.Interpolate('artifacts/%(prop:buildername)s-%(prop:buildnumber)s/sun8i-h3-orangepi-pc-plus.dtb'),
        'zImage': util.Interpolate('artifacts/%(prop:buildername)s-%(prop:buildnumber)s/zImage'),
    },
    doStepIf=lambda step: step.build.getProperty('HARDWARE_TESTS', default=False),
    waitForFinish=False))

c['builders'].append(
    util.BuilderConfig(
        name="sunxi-arm-kernel-build",
        project="SUNXI",
        workernames=["builder1"],
        factory=sunxi_factory01))

#### 'LAB TEST' builders for SUNXI projects
#
# - slot2: OrangePi PC Plus
#

# slot2: test arm sunxi kernel on orange-pi-pc-plus

slot2 = util.BuildFactory()

slot2.addStep(steps.Git(repourl='https://github.com/geomatsi/lab-tests.git',
                           alwaysUseLatest=True,
                           mode='incremental'))

slot2.addStep(steps.FileDownload(
    doStepIf=lambda step: step.build.getProperty('DEFAULT_IMAGES', default=False),
    haltOnFailure=True,
    mastersrc='artifacts/images/default/slot2/zImage',
    workerdest='lab/workspace/zImage',
    name='download default kernel',
    mode=0o755))

# FIXME: lock needed for the shared 'latest' directory
slot2.addStep(steps.FileDownload(
    doStepIf=lambda step: not step.build.getProperty('DEFAULT_IMAGES', default=False),
    haltOnFailure=True,
    mastersrc=util.Property('zImage', default='artifacts/latest/sunxi/zImage'),
    workerdest='lab/workspace/zImage',
    name='download latest kernel',
    mode=0o755))

slot2.addStep(steps.FileDownload(
    doStepIf=lambda step: step.build.getProperty('DEFAULT_IMAGES', default=False),
    haltOnFailure=True,
    mastersrc='artifacts/images/default/slot2/sun8i-h3-orangepi-pc-plus.dtb',
    workerdest='lab/workspace/sun8i-h3-orangepi-pc-plus.dtb',
    name='download default dtb',
    mode=0o755))

# FIXME: lock needed for the shared 'latest' directory
slot2.addStep(steps.FileDownload(
    doStepIf=lambda step: not step.build.getProperty('DEFAULT_IMAGES', default=False),
    haltOnFailure=True,
    mastersrc=util.Property('sun8i-h3-orangepi-pc-plus.dtb', default='artifacts/latest/sunxi/sun8i-h3-orangepi-pc-plus.dtb'),
    workerdest='lab/workspace/sun8i-h3-orangepi-pc-plus.dtb',
    name='download latest dtb',
    mode=0o755))

slot2.addStep(steps.ShellSequence(
    haltOnFailure=True,
    commands=[
        util.ShellArg(command=['md5sum', 'workspace/sun8i-h3-orangepi-pc-plus.dtb'], logname='check dtb'),
        util.ShellArg(command=['md5sum', 'workspace/zImage'], logname='check kernel'),
        util.ShellArg(command=['labgrid-client', 'places'], logname='check labgrid'),
        util.ShellArg(command=['labgrid-client', '-p', 'slot2', 'release', '--kick'], logname='force release slot'),
        util.ShellArg(command=['labgrid-client', '-p', 'slot2', 'acquire'], logname='acquire slot'),
    ],
    workdir="build/lab",
    env={
        "LG_COORDINATOR": "192.168.88.25",
    }))

slot2.addStep(steps.ShellCommand(
    haltOnFailure=True,
    command=['pytest', '--lg-log', '--lg-env', 'configs/targets/remote/test-orangepi-pc-netboot.yaml', 'tests/test_shell.py::test_version'],
    workdir="build/lab",
    logfiles={"console": { "filename": "console_main", "follow": True}},
    env={
        "LG_COORDINATOR": "192.168.88.25",
        "LG_IMAGES"     : "$PWD/workspace",
        "LG_LINUX"      : "zImage",
        "LG_DTB"        : "sun8i-h3-orangepi-pc-plus.dtb",
        "LG_PLACE"      : "slot2",
    }))

c['builders'].append(
    util.BuilderConfig(
        name="test-orangepi-pc-plus",
        project="SUNXI",
        workernames=["tester1"],
        factory=slot2))


