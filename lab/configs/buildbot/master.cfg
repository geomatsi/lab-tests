# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *

####### BUILDMASTER

c = BuildmasterConfig = {}

####### TESTLAB

lab = {
    "slot1": {
        "board"   : "",
        "enabled" : False,
        "kernel"  : "",
        "ipaddr"  : "",
        "dtb"     : "",
    },
    "slot2": {
        "board"   : "OrangePi PC Plus",
        "enabled" : True,
        "kernel"  : "zImage",
        "ipaddr"  : "192.168.1.10",
        "dtb"     : "sun8i-h3-orangepi-pc-plus.dtb",
    },
    "slot3": {
        "board"   : "MangoPi MQ Pro",
        "enabled" : True,
        "kernel"  : "Image",
        "ipaddr"  : "192.168.1.20",
        "dtb"     : "sun20i-d1-mangopi-mq-pro.dtb",
    },
    "slot4": {
        "board"   : "",
        "enabled" : False,
        "kernel"  : "",
        "ipaddr"  : "",
        "dtb"     : "",
    },
    "slot5": {
        "board"   : "",
        "enabled" : False,
        "kernel"  : "",
        "ipaddr"  : "",
        "dtb"     : "",
    },
    "slot6": {
        "board"   : "",
        "enabled" : False,
        "kernel"  : "",
        "ipaddr"  : "",
        "dtb"     : "",
    },
    "slot7": {
        "board"   : "",
        "enabled" : False,
        "kernel"  : "",
        "ipaddr"  : "",
        "dtb"     : "",
    },
    "slot8": {
        "board"   : "Sipeed LicheePi 4A",
        "enabled" : True,
        "kernel"  : "Image",
        "ipaddr"  : "192.168.1.80",
        "dtb"     : "th1520-lichee-pi-4a.dtb",
    },
}

####### WORKERS

c['workers'] = []
c['workers'].append(worker.Worker("builder1", "topsecret"))
c['workers'].append(worker.Worker("tester1", "topsecret"))

c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

c['change_source'] = []

c['change_source'].append(changes.GitPoller(
        'git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git',
        workdir='gitpoller-workdir', branch='master',
        pollAtLaunch=True, pollInterval=3600,
        category='kernel'))

c['change_source'].append(changes.GitPoller(
        'https://github.com/riscv/opensbi.git',
        workdir='gitpoller-workdir', branch='master',
        pollAtLaunch=True, pollInterval=3600,
        category='opensbi'))

####### SCHEDULERS

c['schedulers'] = []

# check kernel commits

@util.renderer
def select_kernel_builders(props):
    builders = set()

    for fn in props.files:
        print(f"next file: {fn}")

        if fn.startswith("arch/riscv/"):
            builders.add('riscv64-kernel-build')

        if fn.startswith("arch/arm/"):
            builders.add('sunxi-arm-kernel-build')

    props.setProperty('RISCV_BUILD', '1' if 'riscv64-kernel-build' in builders else '0', 'select_kernel_builders')
    props.setProperty('SUNXI_BUILD', '1' if 'sunxi-arm-kernel-build' in builders else '0', 'select_kernel_builders')

    builders.add('kernel-poll')
    print(f"expected builders: {list(builders)}")
    #return list(builders)
    return ["kernel-poll"]

c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="kernel-master-branch-scheduler",
                            change_filter=util.ChangeFilter(branch='master', category='kernel'),
                            builderNames=select_kernel_builders))

# check opensbi commits

@util.renderer
def select_opensbi_builders(props):
    builders = set()

    props.setProperty('PLATFORM', 'none', 'get_builders')

    for fn in props.files:
        print(f"next file: {fn}")
        if fn.startswith("platforms/generic/"):
            props.setProperty('PLATFORM', 'generic', 'opensbi')
        elif fn.startswith("platforms/kendryte/"):
            props.setProperty('PLATFORM', 'kendryte', 'opensbi')
        else:
            props.setProperty('PLATFORM', 'all', 'opensbi')

    builders.add('opensbi-poll')
    print(f"expected builders: {list(builders)}")
    return list(builders)

c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="opensbi-master-branch-scheduler",
                            change_filter=util.ChangeFilter(branch='master', category='opensbi'),
                            builderNames=select_opensbi_builders))

# schedulers and triggers for riscv-kernel project

c['schedulers'].append(schedulers.ForceScheduler(
                            name="force-riscv-kernel",
                            builderNames=["riscv64-kernel-build"]))

c['schedulers'].append(schedulers.Triggerable(
    name='riscv64-kernel-test-scheduler',
    builderNames=['test-mangopi-mqpro', 'test-sipeed-lpi4a']))

# schedulers and triggers for sunxi-arm-kernel project

c['schedulers'].append(schedulers.ForceScheduler(
                            name="force-sunxi-arm-kernel",
                            builderNames=["sunxi-arm-kernel-build"]))

c['schedulers'].append(schedulers.Triggerable(
    name='sunxi-arm-kernel-test-scheduler',
    builderNames=['test-orangepi-pc-plus']))

####### BUILDERS

c['builders'] = []

#### test builders

## kernel changes

factory00_0 = util.BuildFactory()

factory00_0.addStep(steps.ShellCommand(
    command=["echo", "RISCV_BUILD=", util.Property("RISCV_BUILD")]
))

factory00_0.addStep(steps.ShellCommand(
    command=["echo", "SUNXI_BUILD=", util.Property("SUNXI_BUILD")]
))

factory00_0.addStep(steps.ShellCommand(
    command=['date']
))

c['builders'].append(
    util.BuilderConfig(name="kernel-poll",
      workernames=["builder1"],
      factory=factory00_0))

## opensbi changes

factory00_1 = util.BuildFactory()

factory00_1.addStep(steps.ShellCommand(
    command=["echo", "PLATFORM=", util.Property("PLATFORM")]
))

factory00_1.addStep(steps.ShellCommand(
    command=['date']
))

c['builders'].append(
    util.BuilderConfig(name="opensbi-poll",
      workernames=["builder1"],
      factory=factory00_1))


# builder_01: build default riscv64 kernel

factory01 = util.BuildFactory()

factory01.addStep(steps.Git(repourl='git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git',
                           alwaysUseLatest=True,
                           mode='full',
                           method='fresh'))

factory01.addStep(steps.FileDownload(
    mastersrc="artifacts/images/rootfs/rootfs.cpio.rv64",
    workerdest="rootfs.cpio"))

factory01.addStep(steps.ShellSequence(
    commands=[
        util.ShellArg(command=['make', 'defconfig'], logname='configure'),
        util.ShellArg(command=['make', 'allwinner/sun20i-d1-mangopi-mq-pro.dtb'], logname='dtb'),
        util.ShellArg(command=['make', 'thead/th1520-lichee-pi-4a.dtb'], logname='dtb'),
    ],
    env={
        "ARCH": "riscv",
        "CROSS_COMPILE": "/home/matsi/devel2/tools/bootlin/riscv64-lp64d--glibc--bleeding-edge-2025.08-1/bin/riscv64-linux-" 
    }))

factory01.addStep(steps.FileUpload(
    workersrc="arch/riscv/boot/dts/allwinner/sun20i-d1-mangopi-mq-pro.dtb",
    masterdest=util.Interpolate('artifacts/%(prop:buildnumber)s/sun20i-d1-mangopi-mq-pro.dtb'),
    url=util.Interpolate('artifacts/%(prop:buildnumber)s/sun20i-d1-mangopi-mq-pro.dtb'),
    mode=0o755))

factory01.addStep(steps.FileUpload(
    workersrc="arch/riscv/boot/dts/thead/th1520-lichee-pi-4a.dtb",
    masterdest=util.Interpolate('artifacts/%(prop:buildnumber)s/th1520-lichee-pi-4a.dtb'),
    url=util.Interpolate('artifacts/%(prop:buildnumber)s/th1520-lichee-pi-4a.dtb'),
    mode=0o755))

factory01.addStep(steps.Trigger(
    schedulerNames=['riscv64-kernel-test-scheduler'],
    set_properties={
        'sun20i-d1-mangopi-mq-pro.dtb': util.Interpolate('artifacts/%(prop:buildnumber)s/sun20i-d1-mangopi-mq-pro.dtb'), 
        'th1520-lichee-pi-4a.dtb': util.Interpolate('artifacts/%(prop:buildnumber)s/th1520-lichee-pi-4a.dtb'), 
    },
    waitForFinish=False))

c['builders'].append(
    util.BuilderConfig(name="riscv64-kernel-build",
      workernames=["builder1"],
      factory=factory01))

# builder_02: build default sunxi arm kernel

factory02 = util.BuildFactory()

factory02.addStep(steps.Git(repourl='git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git',
                           alwaysUseLatest=True,
                           mode='full',
                           method='fresh'))

factory02.addStep(steps.FileDownload(
    mastersrc="artifacts/images/rootfs/rootfs.cpio.sunxi.arm",
    workerdest="rootfs.cpio"))

factory02.addStep(steps.ShellSequence(
    commands=[
        util.ShellArg(command=['make', 'sunxi_defconfig'], logname='configure'),
        util.ShellArg(command=['make', 'allwinner/sun8i-h3-orangepi-pc-plus.dtb'], logname='dtb'),
    ],
    env={
        "ARCH": "arm",
        "CROSS_COMPILE": "/home/matsi/devel2/tools/bootlin/armv7-eabihf--glibc--bleeding-edge-2025.08-1/bin/arm-linux-",
    }))

factory02.addStep(steps.FileUpload(
    workersrc="arch/arm/boot/dts/allwinner/sun8i-h3-orangepi-pc-plus.dtb",
    masterdest=util.Interpolate('artifacts/%(prop:buildnumber)s/sun8i-h3-orangepi-pc-plus.dtb'),
    url=util.Interpolate('artifacts/%(prop:buildnumber)s/sun8i-h3-orangepi-pc-plus.dtb'),
    mode=0o755))

factory02.addStep(steps.Trigger(
    schedulerNames=['sunxi-arm-kernel-test-scheduler'],
    set_properties={
        'sun8i-h3-orangepi-pc-plus.dtb': util.Interpolate('artifacts/%(prop:buildnumber)s/sun8i-h3-orangepi-pc-plus.dtb'), 
    },
    waitForFinish=False))

c['builders'].append(
    util.BuilderConfig(name="sunxi-arm-kernel-build",
      workernames=["builder1"],
      factory=factory02))

# builder_11: test arm sunxi kernel on orange-pi-pc-plus

factory11 = util.BuildFactory()

factory11.addStep(steps.Git(repourl='https://github.com/geomatsi/lab-tests.git',
                           alwaysUseLatest=True,
                           mode='incremental'))

factory11.addStep(steps.FileDownload(
    mastersrc=util.Property('sun8i-h3-orangepi-pc-plus.dtb'),
    workerdest='lab/workspace/sun8i-h3-orangepi-pc-plus.dtb',
    mode=0o755))

factory11.addStep(steps.ShellSequence(
    commands=[
        util.ShellArg(command=['md5sum', 'workspace/sun8i-h3-orangepi-pc-plus.dtb'], logname='check dtb'),
        util.ShellArg(command=['md5sum', 'workspace/zImage'], logname='check kernel'),
        util.ShellArg(command=['labgrid-client', 'places'], logname='check labgrid'),
    ],
    workdir="build/lab",
    env={
        "LG_COORDINATOR": "192.168.88.25",
    }))

factory11.addStep(steps.ShellCommand(
    command=['pytest', '--lg-log', '--lg-env', 'configs/targets/remote/test-orangepi-pc-netboot.yaml', 'tests/test_shell.py::test_version'],
    workdir="build/lab",
    logfiles={"console": { "filename": "console_main", "follow": True}},
    env={
        "LG_COORDINATOR": "192.168.88.25",
        "LG_IMAGES"     : "$PWD/workspace",
        "LG_LINUX"      : "zImage",
        "LG_DTB"        : "sun8i-h3-orangepi-pc-plus.dtb",   
        "LG_PLACE"      : "slot2",
    }))

c['builders'].append(
    util.BuilderConfig(name="test-orangepi-pc-plus",
      workernames=["tester1"],
      factory=factory11))

# builder_21: test riscv64 kernel on mango-pi-mq-pro

factory21 = util.BuildFactory()

factory21.addStep(steps.Git(repourl='https://github.com/geomatsi/lab-tests.git',
                           alwaysUseLatest=True,
                           mode='incremental'))

factory21.addStep(steps.FileDownload(
    mastersrc=util.Property('sun20i-d1-mangopi-mq-pro.dtb'),
    workerdest='lab/workspace/sun20i-d1-mangopi-mq-pro.dtb',
    mode=0o755))

factory21.addStep(steps.ShellSequence(
    commands=[
        util.ShellArg(command=['md5sum', 'workspace/sun20i-d1-mangopi-mq-pro.dtb'], logname='check dtb'),
        util.ShellArg(command=['md5sum', 'workspace/Image'], logname='check kernel'),
        util.ShellArg(command=['labgrid-client', 'places'], logname='check labgrid'),
    ],
    workdir="build/lab",
    env={
        "LG_COORDINATOR": "192.168.88.25",
    }))

factory21.addStep(steps.ShellCommand(
    command=['pytest', '--lg-log', '--lg-env', 'configs/targets/remote/test-mqpro-mmc.yaml', 'tests/test_shell.py::test_version'],
    workdir="build/lab",
    logfiles={"console": { "filename": "console_main", "follow": True}},
    env={
        "LG_COORDINATOR": "192.168.88.25",
        "LG_IMAGES"     : "$PWD/workspace",
        "LG_LINUX"      : "Image",
        "LG_DTB"        : "sun20i-d1-mangopi-mq-pro.dtb",   
        "LG_PLACE"      : "slot3",
    }))

c['builders'].append(
    util.BuilderConfig(name="test-mangopi-mqpro",
      workernames=["tester1"],
      factory=factory21))

# builder_22: test riscv64 kernel on sipeed-lpi4a

factory22 = util.BuildFactory()

factory22.addStep(steps.Git(repourl='https://github.com/geomatsi/lab-tests.git',
                           alwaysUseLatest=True,
                           mode='incremental'))

factory22.addStep(steps.FileDownload(
    mastersrc=util.Property('th1520-lichee-pi-4a.dtb'),
    workerdest='lab/workspace/th1520-lichee-pi-4a.dtb',
    mode=0o755))

factory22.addStep(steps.ShellSequence(
    commands=[
        util.ShellArg(command=['md5sum', 'workspace/th1520-lichee-pi-4a.dtb'], logname='check dtb'),
        util.ShellArg(command=['md5sum', 'workspace/Image'], logname='check kernel'),
        util.ShellArg(command=['labgrid-client', 'places'], logname='check labgrid'),
    ],
    workdir="build/lab",
    env={
        "LG_COORDINATOR": "192.168.88.25",
    }))

factory22.addStep(steps.ShellCommand(
    command=['pytest', '--lg-log', '--lg-env', 'configs/targets/remote/test-lpi4a-netboot.yaml', 'tests/test_shell.py::test_version'],
    workdir="build/lab",
    logfiles={"console": { "filename": "console_main", "follow": True}},
    env={
        "LG_COORDINATOR": "192.168.88.25",
        "LG_IMAGES"     : "$PWD/workspace",
        "LG_LINUX"      : "Image",
        "LG_DTB"        : "th1520-lichee-pi-4a.dtb",
        "LG_PLACE"      : "slot8",
    }))

c['builders'].append(
    util.BuilderConfig(name="test-sipeed-lpi4a",
      workernames=["tester1"],
      factory=factory22))

####### BUILDBOT SERVICES

c['services'] = []

####### PROJECT IDENTITY

c['title'] = "Labgrid tests"
c['titleURL'] = "https://buildbot.github.io/hello-world/"

c['buildbotURL'] = "http://webb:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010, plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

####### DB URL

c['db'] = {
    'db_url' : "sqlite:///state.sqlite",
}
